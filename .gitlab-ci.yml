default:
    tags:
        - k8s

stages:
    - smoke
    - build
    - test
    - deploy

.go-cache:
    variables:
        GOPATH: $CI_PROJECT_DIR/.go
    before_script:
        - mkdir -p .go
    cache:
        paths:
            - .go/pkg/mod/

# sast:
#     stage: test
# include:
#     - template: Security/SAST.gitlab-ci.yml

unit tests:
    # image: git.stamus-networks.com:4567/lanath/lab/stamusctl-build-image:latest
    image: golang:alpine
    extends: .go-cache
    stage: smoke
    script:
        - apk add --no-cache gcc musl-dev make
        - go install github.com/swaggo/swag/cmd/swag@latest
        - make test

daemon tests:
    # image: git.stamus-networks.com:4567/lanath/lab/stamusctl-build-image:latest
    image: golang:alpine
    extends: .go-cache
    stage: smoke
    script:
        - apk add --no-cache gcc musl-dev make
        - go install github.com/swaggo/swag/cmd/swag@latest
        - $(pwd)/scripts/move.sh
        - STAMUS_APP_NAME=stamusctl go run ./cmd compose init -h
        - make daemon-test

kaniko cli:
    stage: build
    before_script: []
    image:
        name: gcr.io/kaniko-project/executor:v1.14.0-debug
        entrypoint: ['']
    needs:
        - unit tests
    script:
        - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"$(echo -n $CI_DEPENDENCY_PROXY_SERVER | awk -F[:] '{print $1}')\":{\"auth\":\"$(printf "%s:%s" ${CI_DEPENDENCY_PROXY_USER} "${CI_DEPENDENCY_PROXY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
        - /kaniko/executor
          --context "${CI_PROJECT_DIR}"
          --dockerfile "${CI_PROJECT_DIR}/docker/Dockerfile.cli"
          --destination "${CI_REGISTRY_IMAGE}/cli:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}"
          --destination "${CI_REGISTRY_IMAGE}/cli:${CI_COMMIT_BRANCH}"
          --cache=true
          --cache-copy-layers=true
          --cache-ttl=72h

kaniko cli main:
    stage: build
    before_script: []
    only:
        - main
    image:
        name: gcr.io/kaniko-project/executor:v1.14.0-debug
        entrypoint: ['']
    needs:
        - unit tests
    script:
        - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"$(echo -n $CI_DEPENDENCY_PROXY_SERVER | awk -F[:] '{print $1}')\":{\"auth\":\"$(printf "%s:%s" ${CI_DEPENDENCY_PROXY_USER} "${CI_DEPENDENCY_PROXY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
        - /kaniko/executor
          --context "${CI_PROJECT_DIR}"
          --dockerfile "${CI_PROJECT_DIR}/docker/Dockerfile.cli"
          --destination "${CI_REGISTRY_IMAGE}/cli:${CI_COMMIT_SHORT_SHA}"
          --destination "${CI_REGISTRY_IMAGE}/cli:latest"
          --cache=true
          --cache-copy-layers=true
          --cache-ttl=72h

kaniko daemon:
    stage: build
    before_script: []
    image:
        name: gcr.io/kaniko-project/executor:v1.14.0-debug
        entrypoint: ['']
    needs:
        - daemon tests
    script:
        - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"$(echo -n $CI_DEPENDENCY_PROXY_SERVER | awk -F[:] '{print $1}')\":{\"auth\":\"$(printf "%s:%s" ${CI_DEPENDENCY_PROXY_USER} "${CI_DEPENDENCY_PROXY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
        - /kaniko/executor
          --context "${CI_PROJECT_DIR}"
          --dockerfile "${CI_PROJECT_DIR}/docker/Dockerfile.daemon"
          --destination "${CI_REGISTRY_IMAGE}/daemon:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}"
          --destination "${CI_REGISTRY_IMAGE}/daemon:${CI_COMMIT_BRANCH}"
          --cache=true
          --cache-copy-layers=true
          --cache-ttl=72h

kaniko daemon main:
    stage: build
    before_script: []
    only:
        - main
    image:
        name: gcr.io/kaniko-project/executor:v1.14.0-debug
        entrypoint: ['']
    needs:
        - daemon tests
    script:
        - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"$(echo -n $CI_DEPENDENCY_PROXY_SERVER | awk -F[:] '{print $1}')\":{\"auth\":\"$(printf "%s:%s" ${CI_DEPENDENCY_PROXY_USER} "${CI_DEPENDENCY_PROXY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
        - /kaniko/executor
          --context "${CI_PROJECT_DIR}"
          --dockerfile "${CI_PROJECT_DIR}/docker/Dockerfile.daemon"
          --destination "${CI_REGISTRY_IMAGE}/daemon:${CI_COMMIT_SHORT_SHA}"
          --destination "${CI_REGISTRY_IMAGE}/daemon:latest"
          --cache=true
          --cache-copy-layers=true
          --cache-ttl=72h

build cli:
    # image: git.stamus-networks.com:4567/lanath/lab/stamusctl-build-image:latest
    image: golang:alpine
    extends: .go-cache
    stage: build
    artifacts:
        expire_in: 1 day
        paths:
            - stamusctl
    needs:
        - unit tests
    script:
        - apk add --no-cache gcc musl-dev make
        - go install github.com/swaggo/swag/cmd/swag@latest
        - make cli
        - mv dist/stamusctl .

build daemon:
    # image: git.stamus-networks.com:4567/lanath/lab/stamusctl-build-image:latest
    image: golang:alpine
    extends: .go-cache
    stage: build
    artifacts:
        expire_in: 1 day
        paths:
            - stamusd
    needs:
        - daemon tests
    script:
        - apk add --no-cache gcc musl-dev make
        - go install github.com/swaggo/swag/cmd/swag@latest
        # - swag init --pd -g root.go -o cmd/docs -d cmd/daemon/run/
        - make daemon
        - mv dist/stamusd .

build test:
    # image: git.stamus-networks.com:4567/lanath/lab/stamusctl-build-image:latest
    image: golang:alpine
    extends: .go-cache
    stage: build
    artifacts:
        expire_in: 1 day
        paths:
            - outputs
            - cli
    needs:
        - unit tests
    script:
        - apk add --no-cache gcc musl-dev make
        - go install github.com/swaggo/swag/cmd/swag@latest
        - chmod +x $(pwd)/scripts/move.sh
        - $(pwd)/scripts/move.sh
        - make test-cli
        - mv .test/outputs outputs
        - mv dist/stamusctl cli

test cli:
    image: busybox
    stage: test
    needs:
        - build cli
    dependencies:
        - build cli
    script:
        - STAMUS_APP_NAME=stamusctl ./stamusctl

test daemon:
    image: busybox
    stage: test
    needs:
        - build daemon
    dependencies:
        - build daemon
    script:
        - STAMUS_APP_NAME=stamusd ./stamusd

compose init:
    image: busybox
    stage: test
    needs:
        - build test
    dependencies:
        - build test
    script:
        - STAMUS_APP_NAME=stamusctl ./cli compose init --default nginx.exec=nginx
        - chmod +x $(pwd)/scripts/compare.sh
        - $(pwd)/scripts/compare.sh ./tmp ./outputs/compose-init

compose init set:
    image: busybox
    stage: test
    needs:
        - build test
    dependencies:
        - build test
    script:
        - STAMUS_APP_NAME=stamusctl ./cli compose init --default nginx.exec=nginx websocket.response=lel
        - chmod +x $(pwd)/scripts/compare.sh
        - $(pwd)/scripts/compare.sh ./tmp ./outputs/compose-init-set

compose init optional:
    image: busybox
    stage: test
    needs:
        - build test
    dependencies:
        - build test
    script:
        - STAMUS_APP_NAME=stamusctl ./cli compose init --default nginx=false
        - chmod +x $(pwd)/scripts/compare.sh
        - $(pwd)/scripts/compare.sh ./tmp ./outputs/compose-init-optional

compose init arbitrary:
    image: busybox
    stage: test
    needs:
        - build test
    dependencies:
        - build test
    script:
        - STAMUS_APP_NAME=stamusctl ./cli compose init --default nginx.exec=nginx websocket.port=6969
        - chmod +x $(pwd)/scripts/compare.sh
        - $(pwd)/scripts/compare.sh ./tmp ./outputs/compose-init-arbitrary

compose config set:
    image: busybox
    stage: test
    needs:
        - build test
    dependencies:
        - build test
    script:
        - STAMUS_APP_NAME=stamusctl ./cli compose init --default nginx.exec=nginx
        - STAMUS_APP_NAME=stamusctl ./cli config set websocket.response=lel
        - chmod +x $(pwd)/scripts/compare.sh
        - $(pwd)/scripts/compare.sh ./tmp ./outputs/compose-init-set

compose config reload:
    image: busybox
    stage: test
    needs:
        - build test
    dependencies:
        - build test
    script:
        - STAMUS_APP_NAME=stamusctl ./cli compose init --default nginx.exec=nginx
        - STAMUS_APP_NAME=stamusctl ./cli config set websocket.port=6969
        - STAMUS_APP_NAME=stamusctl ./cli config set --reload
        - chmod +x $(pwd)/scripts/compare.sh
        - $(pwd)/scripts/compare.sh ./tmp ./outputs/compose-init

refresh-app-of-apps:
    stage: deploy
    needs:
        - test daemon
    variables:
        APP: stamusd
        BRANCH: $CI_COMMIT_BRANCH
        SHA: $CI_COMMIT_SHORT_SHA
        PROJECT: $CI_PROJECT_NAME
        NAMESPACE: $CI_PROJECT_NAMESPACE
    trigger: lanath/app-of-apps
